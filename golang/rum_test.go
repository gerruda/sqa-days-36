package tests

import (
"io"
"net/http"
"testing"
"github.com/ozertech/ozon-api-client" // –£—Å–ª–æ–≤–Ω—ã–π –∏–º–ø–æ—Ä—Ç
"github.com/zdz1715/allure-go"
)

const (
	baseURL       = "https://www.ozon.ru"
	apiServiceURL = "https://api.internal.ozon.ru/v1/data"
	dbCheckURL    = "https://dbauth.ozon.ru/verify"
)

func (s TestSuite) TestOzonRum(t provider.T)  {
			t.Epic("Ozon Data Flow"),
			t.Feature("Data Consistency Check"),
			t.Description("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫–≤–æ–∑–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å—ã Ozon"),
			t.WithNewStep("üîó –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –≤ —Å–µ—Ä–≤–∏—Å", func(sCtx provider.StepCtx) {
				ctx := context_provider.WithProvider(s.ctx, sCtx)
				defer ctx.Done()

				var targetHeader string
				var dataID string

				// –®–∞–≥ 1: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Ozon.ru –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
				t.WithNewStep("–ó–∞–ø—Ä–æ—Å –∫ Ozon.ru", func(sCtx provider.StepCtx) {
					req, _ := http.NewRequest("GET", baseURL+"/some-product-page", nil)
					client := &http.Client{}
					resp, err := client.Do(req)
					sCtx.Require().NoError(err,"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: %v", err)

					defer resp.Body.Close()

					sCtx.Require().Equal(http.StatusOK, resp.StatusCode, "–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ–¥: %d", resp.StatusCode)

					targetHeader = resp.Header.Get("Data-Id")
					sCtx.Require().NotEmpty(targetHeader, "–ó–∞–≥–æ–ª–æ–≤–æ–∫ Data-Id")
				})

				// –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
				var serviceData api_pb.GetDataByIDResponce
				t.WithNewStep("–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–µ—Ä–≤–∏—Å–∞", func(sCtx provider.StepCtx) {
					req := api_pb.GetDataByIDRequest{
						DataID: dataID
					}
					headers := map[string]string{"Authorization": "Bearer "+ozonapi.GetAPIToken()}

					resp, err := ozonapiService.GetDataByID(s.ctx, req, headers)
						sCtx.Require().NoError(err,"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: %v", err)
						sCtx.Require().NotNil(resp, "–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è ID: %s", dataID)
				})

				reqRum := rumService.rumRequest{
					ID: dataID,
					Metrics: []rumService.rumMetrics{
						Lcp: {
							value: random.Int32(),
						},
					},
				}

				// –®–∞–≥ 3: –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Å–µ—Ä–≤–∏—Å —Ö—Ä–∞–Ω–µ–Ω–∏—è RUM –º–µ—Ç—Ä–∏–∫
				t.WithNewStep("–í–∞–ª–∏–¥–∞—Ü–∏—è –≤ –ë–î", func(sCtx provider.StepCtx) {
				resp, err := rumService(s.ctx, reqRum)
					sCtx.Require().NoError(err,"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ—Ç—Ä–∏–∫: %v", err)
					sCtx.Require().NotNil(resp, "–û—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π")
				})

				// –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ë–î
				t.WithNewStep("–í–∞–ª–∏–¥–∞—Ü–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î –º–µ—Ç—Ä–∏–∫", func(sCtx provider.StepCtx) {
					bdData, err := rumService.getByID(s.ctx, dataID)
					sCtx.Require().NoError(err,"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î: %v", err)
					sCtx.Require().NotNil(bdData, "–û—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π")

					sCtx.Assert().Equal(reqRum.Metrics[0].Lcp, bdData.Lcp, "–ü–æ–ª–µ LCP")
				})
			}),
		)
	}
}